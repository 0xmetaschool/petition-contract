/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.82.0
  Forc version: 0.49.3
  Fuel-Core version: 0.22.1
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum CampaignErrorInput { CampaignEnded = 'CampaignEnded', CampaignHasBeenCancelled = 'CampaignHasBeenCancelled', DeadlineNotReached = 'DeadlineNotReached' };
export enum CampaignErrorOutput { CampaignEnded = 'CampaignEnded', CampaignHasBeenCancelled = 'CampaignHasBeenCancelled', DeadlineNotReached = 'DeadlineNotReached' };
export enum CampaignStateInput { Cancelled = 'Cancelled', Successful = 'Successful', Progress = 'Progress' };
export enum CampaignStateOutput { Cancelled = 'Cancelled', Successful = 'Successful', Progress = 'Progress' };
export enum CreationErrorInput { DeadlineMustBeInTheFuture = 'DeadlineMustBeInTheFuture' };
export enum CreationErrorOutput { DeadlineMustBeInTheFuture = 'DeadlineMustBeInTheFuture' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum UserErrorInput { SuccessfulCampaign = 'SuccessfulCampaign', AlreadySigned = 'AlreadySigned', InvalidID = 'InvalidID', UnauthorizedUser = 'UnauthorizedUser', UserHasNotSigned = 'UserHasNotSigned' };
export enum UserErrorOutput { SuccessfulCampaign = 'SuccessfulCampaign', AlreadySigned = 'AlreadySigned', InvalidID = 'InvalidID', UnauthorizedUser = 'UnauthorizedUser', UserHasNotSigned = 'UserHasNotSigned' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type CampaignInput = { id: BigNumberish };
export type CampaignOutput = { id: BN };
export type CampaignInfoInput = { author: IdentityInput, state: CampaignStateInput, deadline: BigNumberish, total_signs: BigNumberish };
export type CampaignInfoOutput = { author: IdentityOutput, state: CampaignStateOutput, deadline: BN, total_signs: BN };
export type CancelledCampaignEventInput = { campaign_id: BigNumberish };
export type CancelledCampaignEventOutput = { campaign_id: BN };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type CreatedCampaignEventInput = { author: IdentityInput, campaign_info: CampaignInfoInput, campaign_id: BigNumberish };
export type CreatedCampaignEventOutput = { author: IdentityOutput, campaign_info: CampaignInfoOutput, campaign_id: BN };
export type SignedEventInput = { campaign_id: BigNumberish, user: IdentityInput };
export type SignedEventOutput = { campaign_id: BN, user: IdentityOutput };
export type SignsInput = { sign: BigNumberish, campaign_id: BigNumberish };
export type SignsOutput = { sign: number, campaign_id: BN };
export type SuccessfulCampaignEventInput = { campaign_id: BigNumberish, total_signs: BigNumberish };
export type SuccessfulCampaignEventOutput = { campaign_id: BN, total_signs: BN };
export type UnsignedEventInput = { campaign_id: BigNumberish, user: IdentityInput };
export type UnsignedEventOutput = { campaign_id: BN, user: IdentityOutput };

interface PetitionContractAbiInterface extends Interface {
  functions: {
    cancel_campaign: FunctionFragment;
    create_campaign: FunctionFragment;
    end_campaign: FunctionFragment;
    sign_petition: FunctionFragment;
    unsign_petition: FunctionFragment;
    campaign: FunctionFragment;
    campaign_info: FunctionFragment;
    sign_count: FunctionFragment;
    signed: FunctionFragment;
    total_campaigns: FunctionFragment;
    user_campaign_count: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'cancel_campaign', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'create_campaign', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'end_campaign', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'sign_petition', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'unsign_petition', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'campaign', values: [BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'campaign_info', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'sign_count', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'signed', values: [BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_campaigns', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'user_campaign_count', values: [IdentityInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'cancel_campaign', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create_campaign', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'end_campaign', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'sign_petition', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'unsign_petition', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'campaign', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'campaign_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'sign_count', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'signed', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_campaigns', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'user_campaign_count', data: BytesLike): DecodedValue;
}

export class PetitionContractAbi extends Contract {
  interface: PetitionContractAbiInterface;
  functions: {
    cancel_campaign: InvokeFunction<[campaign_id: BigNumberish], void>;
    create_campaign: InvokeFunction<[deadline: BigNumberish], void>;
    end_campaign: InvokeFunction<[campaign_id: BigNumberish], void>;
    sign_petition: InvokeFunction<[campaign_id: BigNumberish], void>;
    unsign_petition: InvokeFunction<[campaign_id: BigNumberish], void>;
    campaign: InvokeFunction<[campaign_id: BigNumberish, user: IdentityInput], Option<CampaignOutput>>;
    campaign_info: InvokeFunction<[campaign_id: BigNumberish], Option<CampaignInfoOutput>>;
    sign_count: InvokeFunction<[user: IdentityInput], BN>;
    signed: InvokeFunction<[sign_history_index: BigNumberish, user: IdentityInput], Option<SignsOutput>>;
    total_campaigns: InvokeFunction<[], BN>;
    user_campaign_count: InvokeFunction<[user: IdentityInput], BN>;
  };
}
